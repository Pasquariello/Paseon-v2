{"version":3,"sources":["actions/accountActions.js","serviceWorker.js","reducers/accountReducer.js","reducers/index.js","components/Auth.js","layouts/DashboardLayout/TopBar.js","layouts/DashboardLayout/index.js","components/LoadingScreen.js","components/AuthGuard.js","Routes.js","App.js","index.js","store/index.js"],"names":["LOGIN_SUCCESS","login","email","password","dispatch","a","type","payload","auth","Boolean","window","location","hostname","match","initialState","accountReducer","state","action","console","log","Object","assign","rootReducer","combineReducers","account","Auth","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","TopBar","classes","className","AppBar","position","elevation","Toolbar","Typography","variant","Link","href","color","Button","DashboardLayout","children","style","height","Box","alignItems","backgroundColor","palette","background","default","display","flexDirection","justifyContent","minHeight","padding","AuthGuard","useSelector","to","lazy","createBrowserHistory","Routes","createStyles","boxSizing","margin","html","width","body","App","store","preloadedState","middlewares","thunkMiddleware","middlewareEnhancer","composeWithDevTools","applyMiddleware","enhancers","composedEnhancers","compose","createStore","configureStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kMAGaA,EAAgB,yBA4BtB,SAASC,EAAMC,EAAOC,GAC3B,8CAAO,WAAOC,GAAP,SAAAC,EAAA,+DAEHD,EAAS,CACPE,KAAMN,EACNO,QAAS,CACPC,MAAM,KALP,kHAAP,wD,8HCpBkBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oCCbAC,EAAe,CACjBN,MAAM,GAiBOO,EAdM,WAAmC,IAAlCC,EAAiC,uDAAzBF,EAAcG,EAAW,uCACrD,OAAQA,EAAOX,MAEb,KAAKN,IAEH,OADAkB,QAAQC,IAAI,MACLC,OAAOC,OAAO,GAAIL,EAAO,CAC5BR,MAAM,IAGZ,QACE,OAAOQ,ICXAM,EAJKC,0BAAgB,CAChCC,QAAST,I,sCCkCIU,I,2CC5BXC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,OAIC,SAASK,IACtB,IAAMC,EAAUV,IAEhB,OACE,yBAAKW,UAAWD,EAAQP,MACtB,kBAACS,EAAA,EAAD,CAAQC,SAAS,SAASC,UAAU,KAClC,kBAACC,EAAA,EAAD,KAEE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKN,UAAWD,EAAQF,OAC1C,kBAACU,EAAA,EAAD,CAAMC,KAAK,iBAAiBC,MAAM,WAAlC,WAKF,kBAACC,EAAA,EAAD,CAAQD,MAAM,WAAd,a,aCnBKE,EAbS,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAEtB,OACI,yBAAKC,MAAO,CAACC,OAAQ,SACjB,kBAAChB,EAAD,MAEA,kBAACiB,EAAA,EAAD,KACCH,K,aCTKtB,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJwB,WAAY,SACZC,gBAAiB1B,EAAM2B,QAAQC,WAAWC,QAC1CC,QAAS,OACTC,cAAe,SACfR,OAAQ,OACRS,eAAgB,SAChBC,UAAW,OACXC,QAASlC,EAAMK,QAAQ,QCEZ8B,MAVf,YAAkC,IAAbd,EAAY,EAAZA,SAEnB,OADgBe,aAAY,SAAChD,GAAD,OAAWA,EAAMQ,WAChChB,KAGN,6BAAMyC,GAFJ,kBAAC,IAAD,CAAUgB,GAAG,YCyBPC,gBAAK,kBAAM,uDAgCPA,gBAAK,kBAAM,uDAKXA,gBAAK,kBAAM,uDC1DhBC,cDmHCC,IClHX1C,EAAYC,aAAW,kBAAM0C,YAAa,CAC9C,UAAW,CACT,IAAK,CACHC,UAAW,aACXC,OAAQ,EACRT,QAAS,GAEXU,KAAM,CACJ,yBAA0B,cAC1B,0BAA2B,YAC3BrB,OAAQ,OACRsB,MAAO,QAETC,KAAM,CACJvB,OAAQ,OACRsB,MAAO,QAET,QAAS,CACPtB,OAAQ,OACRsB,MAAO,cAkBEE,MAdf,WACEjD,KCGIkD,EClCC,WAA8C,IAAtBC,EAAqB,uDAAJ,GACxCC,EAAc,CAACC,KAEfC,EAAqBC,8BACzBC,kBAAe,WAAf,EAAmBJ,IAEfK,EAAY,CAACH,GACbI,EAAoBC,UAAO,WAAP,EAAWF,GAC/BP,EAAQU,sBAAYhE,EAAauD,EAAgBO,GACvD,OAAOR,EDyBKW,GACdC,IAASC,OACP,kBAAC,IAAD,CAAUb,MAAOA,GACb,kBAAC,EAAD,OAEJc,SAASC,eAAe,SVuFpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjF,QAAQiF,MAAMA,EAAMC,c","file":"static/js/main.30238713.chunk.js","sourcesContent":["// import axios from 'src/utils/axios';\n// import authService from 'src/services/authService';\n// export const LOGIN_REQUEST = '@account/login-request';\nexport const LOGIN_SUCCESS = '@account/login-success';\nexport const LOGIN_FAILURE = '@account/login-failure';\nexport const SILENT_LOGIN = '@account/silent-login';\nexport const LOGOUT = '@account/logout';\nexport const REGISTER = '@account/register';\nexport const UPDATE_PROFILE = '@account/update-profile';\nexport const USER_REQUEST = '@account/login-request';\nexport const USER_LOADED = '@account/login-request';\nexport const AUTH_ERROR = '@account/login-request';\n\n// export function loadUser() {\n//   return async (dispatch) => {\n//     try {\n//       const user = await authService.getLoggedInUser();\n//       dispatch({\n//         type: USER_LOADED,\n//         payload: {\n//           user\n//         }\n//       });\n//     } catch (error) {\n//       dispatch({ type: AUTH_ERROR });\n//       throw error;\n//     }\n//   };\n// }\n\n\nexport function login(email, password) {\n  return async (dispatch) => {\n    try {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: {\n          auth: true\n        }\n      });\n      //dispatch(loadUser());\n    } catch (error) {\n     // dispatch({ type: LOGIN_FAILURE });\n      throw error;\n    }\n  };\n}\n// export function setUserData(user, auth) {\n//   return (dispatch) => dispatch({\n//     type: SILENT_LOGIN,\n//     payload: {\n//       user,\n//       auth,\n//     }\n//   });\n// }\n// export function logout() {\n//   return async (dispatch) => {\n//     authService.logout();\n//     dispatch({\n//       type: LOGOUT\n//     });\n//   };\n// }\n// export function register() {\n//   return true;\n// }\n// export function updateProfile(update) {\n//   const request = axios.post('/api/account/profile', { update });\n//   return (dispatch) => {\n//     request.then((response) => dispatch({\n//       type: UPDATE_PROFILE,\n//       payload: response.data\n//     }));\n//   };\n// }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n    LOGIN_SUCCESS,\n    \n  } from '../actions/accountActions'\n\nconst initialState = {\n    auth: true\n  };\n  \nconst accountReducer = (state = initialState, action) => {\n    switch (action.type) {\n    \n      case LOGIN_SUCCESS:\n        console.log('yo')\n        return Object.assign({}, state, {\n            auth: true\n        })\n    \n      default:\n        return state;\n    }\n};\n  \n  export default accountReducer;","import { combineReducers } from 'redux';\nimport { reducer as formReducer } from 'redux-form';\nimport accountReducer from './accountReducer';\n\nconst rootReducer = combineReducers({\n    account: accountReducer,\n});\n\nexport default rootReducer;","import React, {\n    useEffect,\n    useState\n  } from 'react';\n  import { useDispatch } from 'react-redux';\n  import PropTypes from 'prop-types';\n//   import SplashScreen from 'src/components/SplashScreen';\n//   import { setUserData, logout } from 'src/actions/accountActions';\n//   import authService from 'src/services/authService';\n\n  function Auth({ children }) {\n    const dispatch = useDispatch();\n    // const [isLoading, setLoading] = useState(true);\n    \n    // useEffect(() => {\n    //   const initAuth = async () => {\n    //     authService.setAxiosInterceptors({\n    //       onLogout: () => dispatch(logout())\n    //     });\n    //     authService.handleAuthentication();\n    //     // checks for token\n    //     if (authService.isAuthenticated()) {\n    //       const user = await authService.getLoggedInUser();\n    //       // double check passing 'true' for auth works\n    //       await dispatch(setUserData(user, true));\n    //     }\n    //     setLoading(false);\n    //   };\n    //   initAuth();\n    // }, [dispatch]);\n\n    // if (isLoading) {\n    //   return <SplashScreen />;\n    // }\n    return <div>{children}</div>;\n  }\n  Auth.propTypes = {\n    children: PropTypes.any\n  };\n  export default Auth;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport { Link } from '@material-ui/core';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function TopBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" elevation='0'>\n        <Toolbar>\n          \n          <Typography variant=\"h6\" className={classes.title}>\n            <Link href=\"/app/dashboard\" color=\"inherit\">\n              Paseon\n            </Link>\n          </Typography>\n          \n          <Button color=\"inherit\">Logout</Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React from 'react';\nimport TopBar from './TopBar';\nimport {Box} from '@material-ui/core';\n// import Container from '@material-ui/core/Container';\n\nconst DashboardLayout = ({children}) => {\n    \n    return (\n        <div style={{height: \"100%\"}}>\n            <TopBar/>\n\n            <Box>\n            {children}\n            </Box>\n        </div>\n    )\n}\n\nexport default DashboardLayout;","import React, { useEffect } from 'react';\nimport NProgress from 'nprogress';\nimport { Box, LinearProgress, makeStyles } from '@material-ui/core';\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    alignItems: 'center',\n    backgroundColor: theme.palette.background.default,\n    display: 'flex',\n    flexDirection: 'column',\n    height: '100%',\n    justifyContent: 'center',\n    minHeight: '100%',\n    padding: theme.spacing(3)\n  }\n}));\nfunction LoadingScreen() {\n  const classes = useStyles();\n  useEffect(() => {\n    NProgress.start();\n    return () => {\n      NProgress.done();\n    };\n  }, []);\n  return (\n    <div className={classes.root}>\n      <Box width={400}>\n        <LinearProgress />\n      </Box>\n    </div>\n  );\n}\nexport default LoadingScreen;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nfunction AuthGuard({ children }) {\n  const account = useSelector((state) => state.account);\n  if (!account.auth) {\n    return <Redirect to=\"/login\" />;\n  }\n  return <div>{children}</div>\n}\nAuthGuard.propTypes = {\n  children: PropTypes.any\n};\nexport default AuthGuard;","import React, {\n    lazy,\n    Suspense,\n    Fragment\n  } from 'react';\n  import {\n    Switch,\n    Redirect,\n    Route\n  } from 'react-router-dom';\n  import DashboardLayout from 'src/layouts/DashboardLayout/index';\n  \n//   import MainLayout from 'src/layouts/MainLayout';\n//   import HomeView from 'src/views/pages/HomeView';\n  import LoadingScreen from 'src/components/LoadingScreen';\n  import AuthGuard from 'src/components/AuthGuard';\n  import GuestGuard from 'src/components/GuestGuard';\n  const routesConfig = [\n    {\n      exact: true,\n      path: '/',\n      component: () => <Redirect to=\"/login\" />\n    },\n    // {\n    //   exact: true,\n    //   path: '/404',\n    //   component: lazy(() => import('src/views/pages/Error404View'))\n    // },\n    {\n      exact: true,\n      guard: GuestGuard,\n      path: '/login',\n      component: lazy(() => import('src/views/auth/LoginView'))\n    },\n    // {\n    //   exact: true,\n    //   path: '/login-unprotected',\n    //   component: lazy(() => import('src/views/auth/LoginView'))\n    // },\n    // {\n    //   exact: true,\n    //   guard: GuestGuard,\n    //   path: '/register',\n    //   component: lazy(() => import('src/views/auth/RegisterView'))\n    // },\n    // {\n    //   exact: true,\n    //   path: '/register-unprotected',\n    //   component: lazy(() => import('src/views/auth/RegisterView'))\n    // },\n    {\n      path: '/app',\n      guard: AuthGuard,\n      layout: DashboardLayout,\n      routes: [\n        // NEW\n        {\n          exact: true,\n          path: '/app',\n          component: () => <Redirect to=\"/app/dashboard\" />\n        },\n        {\n          exact: true,\n          path: '/app/dashboard',\n          component: lazy(() => import('src/views/dashboardView'))\n        },\n        {\n          exact: true,\n          path: '/app/form-builder',\n          component: lazy(() => import('src/views/formBuilderView'))\n        },\n    //     {\n    //       exact: true,\n    //       path: '/app/documents/:id',\n    //       component: lazy(() => import('src/views/documents/PreviewView'))\n    //     },\n    //     {\n    //       component: () => <Redirect to=\"/404\" />\n    //     }\n    //   ]\n    // },\n    // {\n    //   path: '*',\n    //   layout: MainLayout,\n    //   routes: [\n    //     {\n    //       exact: true,\n    //       path: '/home',\n    //       component: HomeView\n    //     },\n    //     {\n    //       component: () => <Redirect to=\"/404\" />\n    //     }\n        ]\n    }\n  ];\n  const renderRoutes = (routes) => (routes ? (\n    <Suspense fallback={<LoadingScreen />}>\n      <Switch>\n        {routes.map((route, i) => {\n          const Guard = route.guard || Fragment;\n          const Layout = route.layout || Fragment;\n          const Component = route.component;\n          return (\n            <Route\n              key={i}\n              path={route.path}\n              exact={route.exact}\n              render={(props) => (\n                <Guard>\n                  <Layout>\n                    {route.routes\n                      ? renderRoutes(route.routes)\n                      : <Component {...props} />}\n                  </Layout>\n                </Guard>\n              )}\n            />\n          );\n        })}\n      </Switch>\n    </Suspense>\n  ) : '');\n  function Routes() {\n    return renderRoutes(routesConfig);\n  }\n  export default Routes;","import React from 'react';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\n// import MomentUtils from '@date-io/moment';\nimport {\n  createStyles,\n  makeStyles,\n} from '@material-ui/core';\n// import { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport Auth from 'src/components/Auth';\nimport Routes from 'src/Routes';\nconst history = createBrowserHistory();\nconst useStyles = makeStyles(() => createStyles({\n  '@global': {\n    '*': {\n      boxSizing: 'border-box',\n      margin: 0,\n      padding: 0,\n    },\n    html: {\n      '-webkit-font-smoothing': 'antialiased',\n      '-moz-osx-font-smoothing': 'grayscale',\n      height: '100%',\n      width: '100%'\n    },\n    body: {\n      height: '100%',\n      width: '100%'\n    },\n    '#root': {\n      height: '100%',\n      width: '100%'\n    }\n  }\n}));\nfunction App() {\n  useStyles();\n  return (\n\n        // <MuiPickersUtilsProvider utils={MomentUtils}>\n            <Router history={history}>\n              <Auth>\n                <Routes />\n              </Auth>\n            </Router>\n        // </MuiPickersUtilsProvider>\n\n  );\n}\nexport default App;\n\n","// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\n\n\n// import 'react-app-polyfill/ie11';\n// import 'react-app-polyfill/stable';\n// import 'react-perfect-scrollbar/dist/css/styles.css';\n// import 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\n// import 'react-quill/dist/quill.snow.css';\nimport 'nprogress/nprogress.css';\n// import 'src/assets/css/prism.css';\n// import 'src/mixins/chartjs';\n// import 'src/mixins/prismjs';\n// import 'src/mock';\n// import { enableES5 } from 'immer';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from 'src/serviceWorker';\nimport { configureStore } from 'src/store';\n// import { restoreSettings } from 'src/utils/settings';\nimport App from 'src/App';\n// enableES5();\nconst store = configureStore();\nReactDOM.render(\n  <Provider store={store}>\n      <App />\n  </Provider>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();","import { applyMiddleware, createStore, compose } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from 'src/reducers';\n\nexport function configureStore(preloadedState = {}) {\n  const middlewares = [thunkMiddleware];\n\n  const middlewareEnhancer = composeWithDevTools(\n    applyMiddleware(...middlewares)\n  );\n  const enhancers = [middlewareEnhancer];\n  const composedEnhancers = compose(...enhancers);\n  const store = createStore(rootReducer, preloadedState, composedEnhancers);\n  return store;\n}"],"sourceRoot":""}