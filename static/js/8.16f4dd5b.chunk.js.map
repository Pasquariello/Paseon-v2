{"version":3,"sources":["views/formBuilderView/ServiceCommandUnit.js","views/formBuilderView/FieldOptions.js","views/formBuilderView/index.js"],"names":["ServiceCommandUnit","props","addNewRow","useState","FieldOptions","addNewField","Box","style","width","border","position","padding","Typography","display","justifyContent","flexWrap","name","type","map","field","i","key","Paper","onClick","backgroundColor","cursor","formElementsList","id","shortid","generate","row","col","reorder","list","startIndex","endIndex","result","Array","from","splice","removed","el","index","FormBuilderView","className","onSubmitSuccess","dataList","setDataList","useEffect","buildArrayMatrix","array","tempArray","bar","rowIndex","subItems","colIndex","arr","push","console","log","resultsRef","useRef","scrollToRef","setTimeout","current","scrollIntoView","behavior","block","inline","indexToAdd","tempIndex","elemWidth","setElemWidth","height","newTempArray","length","onDragEnd","destination","sourceIndex","source","destIndex","items","itemSubItemMap","reduce","acc","item","sourceParentId","parseInt","droppableId","destParentId","sourceSubItems","destSubItems","newItems","reorderedSubItems","newSourceSubItems","draggedItem","newDestSubItems","filter","onBeforeCapture","e","provided","snapshot","ref","innerRef","draggableId","draggableProps","parentDrag","dragHandleProps","placeholder"],"mappings":"mLAuLeA,G,oBAhJY,SAACC,GAGpBA,EADAC,UAF+B,IAAD,EAuBAC,qBAvBA,+B,gBCoCvBC,EAnEM,SAACH,GAAW,IAEzBI,EACAJ,EADAI,YA+BJ,OACI,kBAACC,EAAA,EAAD,CAAKC,MAAO,CAACC,MAAO,MAAOC,OAAQ,kBACnC,kBAACH,EAAA,EAAD,CAAKC,MAAO,CAACC,MAAM,UAAWE,SAAU,UACpC,kBAACJ,EAAA,EAAD,CAAKC,MAAO,CAAEE,OAAQ,iBAAkBE,QAAS,KAC7C,kBAACC,EAAA,EAAD,eAIA,kBAACN,EAAA,EAAD,CAAKO,QAAQ,OAAOC,eAAe,eAAeN,MAAM,OAAOD,MAAO,CAACQ,SAAU,SApCxE,CACjB,CACIC,KAAM,aACNC,KAAM,QAEV,CACID,KAAM,YACNC,KAAM,QAEV,CACID,KAAM,QACNC,KAAM,QAEV,CACID,KAAM,QACNC,KAAM,QAEV,CACID,KAAM,QACNC,KAAM,UAEV,CACID,KAAM,WACNC,KAAM,SAcYC,KAAI,SAACC,EAAOC,GACtB,OACI,kBAACd,EAAA,EAAD,CAAKe,IAAKF,EAAMH,KAAMT,MAAQ,CAACC,MAAO,SAAUC,OAAQ,kBACpD,kBAACH,EAAA,EAAD,KACI,kBAACgB,EAAA,EAAD,CACIC,QAAS,WACLlB,EAAYc,EAAMH,KAAMG,EAAMF,OAElCV,MAAO,CAACC,MAAO,OAAQC,OAAQ,iBAAkBe,gBAAiB,OAAQC,OAAQ,UAAWd,QAAS,KAEtG,kBAACC,EAAA,EAAD,KACKO,EAAMH,iB,kBCjDzCU,EAAmB,CACrB,CACIC,GAAIC,IAAQC,WACZb,KAAM,aACNc,IAAK,EACLC,IAAK,EACLd,KAAM,QAEV,CACIU,GAAIC,IAAQC,WACZb,KAAM,YACNc,IAAK,EACLC,IAAK,EACLd,KAAM,QAEV,CACIU,GAAIC,IAAQC,WACZb,KAAM,UACNc,IAAK,EACLC,IAAK,EACLd,KAAM,QAEV,CACIU,GAAIC,IAAQC,WACZb,KAAM,QACNc,IAAK,EACLC,IAAK,EACLd,KAAM,QAEV,CACIU,GAAIC,IAAQC,WACZb,KAAM,QACNc,IAAK,EACLC,IAAK,EACLd,KAAM,QAEV,CACIU,GAAIC,IAAQC,WACZb,KAAM,MACNc,IAAK,EACLC,IAAK,EACLd,KAAM,QAEV,CACIU,GAAIC,IAAQC,WACZb,KAAM,SACNc,IAAK,EACLC,IAAK,EACLd,KAAM,QAEV,CACIU,GAAIC,IAAQC,WACZb,KAAM,SACNc,IAAK,EACLC,IAAK,EACLd,KAAM,QAEV,CACIU,GAAIC,IAAQC,WACZb,KAAM,WACNc,IAAK,EACLC,IAAK,EACLd,KAAM,QAGV,CACIU,GAAIC,IAAQC,WACZb,KAAM,SACNc,IAAK,EACLC,IAAK,EACLd,KAAM,SAKRe,EAAU,SAACC,EAAMC,EAAYC,GAC/B,IAAMC,EAASC,MAAMC,KAAKL,GADkB,EAG1BG,EAAOG,OAAOL,EAAY,GAArCM,EAHqC,oBAW5C,OANAJ,EAAOG,OAAOJ,EAAU,EAAGK,GAEfJ,EAAOlB,KAAI,SAACuB,EAAIC,GACxB,OAAO,2BAAID,GAAX,IAAeV,IAAMW,QAkSdC,UA3Rf,YAAkE,EAAvCC,UAAuC,EAA5BC,gBAA4B,+CAAC,IAAD,EAYhC1C,mBAAS,IAZuB,mBAYzD2C,EAZyD,KAY/CC,EAZ+C,KAehEC,qBAAU,WACRC,EAAiBvB,KAChB,IAiBH,IAAMuB,EAAmB,SAACC,GACxB,IAAIC,EAAY,GAeVC,EAAMD,EAAUjC,KAAI,SAACY,EAAKuB,GAC5B,MAAO,CACH1B,GAAG,GAAD,OAAK0B,GACPC,SAAUxB,EAAIZ,KAAI,SAACa,EAAKwB,GACpB,OAAO,2BACAxB,GADP,IAEIA,IAAKwB,EACLzB,IAAKuB,WAMrBN,EAAYK,GAGZ,IAAMI,EAAM,GAcZ,OAbAJ,EAAIlC,KAAI,SAAAY,GACJ,OAAOA,EAAIwB,SAASpC,KAAI,SAAAa,GAEpB,OADAyB,EAAIC,KAAK1B,GACFA,QAQf2B,QAAQC,IAAI,MAAOH,GAEZL,GAwELS,EAAaC,mBA0BXC,EAAc,WAClBC,YAAW,WACPH,EAAWI,QAAQC,eAAe,CAACC,SAAU,SAAUC,MAAO,MAAOC,OAAQ,cAC9E,MAKClE,EAAY,SAACmE,GACjB,IAAMlB,EAAYL,EAClBK,EAAUZ,OAAO8B,EAAa,EAAG,CAACf,SAAU,KAE5CP,EACII,EAAUjC,KAAI,SAACuB,EAAI6B,GACf,OAAO,2BAAI7B,GAAX,IAAed,GAAG,GAAD,OAAK2C,UAhMgC,EAqMhCnE,oBAAS,GArMuB,mBAqM3DoE,EArM2D,KAqMhDC,EArMgD,KAsMhE,OACE,kBAAClE,EAAA,EAAD,CAAKO,QAAQ,OAAO4D,OAAO,OAAOjE,MAAM,OAAOD,MAAO,CAACE,OAAQ,kBAC3D,kBAAC,EAAD,CACIJ,YA/CU,SAACW,EAAMC,GACzB,IAAMkC,EAAYL,EACZ4B,EAAY,sBACXvB,GADW,CAEd,CACIxB,GAAG,GAAD,OAAKmB,EAAS6B,QAChBrB,SAAU,CACN,CACI3B,GAAIC,IAAQC,WACZb,OACAc,IAAKgB,EAAS6B,OACd5C,IAAK,EACLd,YAKhB8B,EAAY2B,GAEZZ,OA+BI,kBAACxD,EAAA,EAAD,CAAKC,MAAO,CAACE,OAAQ,mBAAoBD,MAAM,OAA/C,KACI,kBAAC,IAAD,CAAiBoE,UAvHT,SAACxC,GAGjB,GADAoC,GAAa,GACRpC,EAAOyC,YAAZ,CAGA,IAAMC,EAAc1C,EAAO2C,OAAOrC,MAC5BsC,EAAY5C,EAAOyC,YAAYnC,MAErC,GAAoB,kBAAhBN,EAAOnB,KAA0B,CACjC,IAAMgE,EAAQjD,EAAQc,EAAUgC,EAAaE,GAC7CjC,EAAYkC,QACT,GAAoB,qBAAhB7C,EAAOnB,KAA6B,CAC7C,IAAMiE,EAAiBpC,EAASqC,QAAO,SAACC,EAAKC,GAE3C,OADAD,EAAIC,EAAK1D,IAAM0D,EAAK/B,SACb8B,IACN,IAEGE,EAAiBC,SAASnD,EAAO2C,OAAOS,aACxCC,EAAeF,SAASnD,EAAOyC,YAAYW,aAG3CE,EAAiBR,EAAeI,GAEhCK,EAAeT,EAAeO,GAEhCG,EAAQ,YAAO9C,GAGnB,GAAIwC,IAAmBG,EAAc,CACnC,IAAMI,EAAoB7D,EACxB0D,EACAZ,EACAE,GAGFY,EAAWA,EAAS1E,KAAI,SAAAmE,GAItB,OAHIA,EAAK1D,IAAM2D,IACbD,EAAK/B,SAAWuC,GAEXR,KAGTtC,EAAY6C,OACP,CACL,IAAIE,EAAiB,YAAOJ,GADvB,EAEiBI,EAAkBvD,OAAOuC,EAAa,GAArDiB,EAFF,oBAIDC,EAAe,YAAOL,GAC1BK,EAAgBzD,OAAOyC,EAAW,EAAGe,GACrCH,EAAWA,EAAS1E,KAAI,SAAAmE,GAMtB,OALIA,EAAK1D,IAAM2D,EACbD,EAAK/B,SAAWwC,EACPT,EAAK1D,IAAM8D,IACpBJ,EAAK/B,SAAW0C,GAEXX,KAGTjD,EAAOnB,KAAO,gBACd8B,EAAY6C,EAASK,QAAO,SAAAnE,GAAG,OAAIA,EAAIwB,SAASqB,eA2DLuB,gBAAiB,SAACC,GAAD,OAAO3B,GAAa,KACxE,kBAAC,IAAD,CAAWgB,YAAY,YAAYvE,KAAK,kBACnC,SAACmF,EAAUC,GAAX,OACG,yBACIC,IAAKF,EAASG,UAGd,4BAAQhF,QAAS,WAAOrB,EAAU,KAAlC,iBAGC4C,EAAS5B,KAAI,SAACmE,EAAM3C,GAAP,OACV,yBACIrB,IAAKgE,EAAK1D,GACV2E,IAAK1C,GAET,kBAAC,IAAD,CAAWvC,IAAKgE,EAAK1D,GAAI6E,YAAanB,EAAK1D,GAAIe,MAAOA,IAErD,SAAC0D,EAAUC,GAAX,OACG,6BACI,uCACIC,IAAKF,EAASG,UACVH,EAASK,gBAGZ/C,QAAQC,IAAI,MAAO0B,GAQpB,kBAAC,EAAD,CACIqB,WAAU,eAAMN,EAASO,iBACzBpC,UAAWA,EACXrE,UAAW,kBAAMA,EAAUwC,EAAQ,IACnCY,SAAU+B,EAAK/B,SACfrC,KAAMoE,EAAK1D,cAc9ByE,EAASQ,iBAM1B,4BACIrF,QAAS,WAEL,IAAMiC,EAAM,GAEZV,EAAS5B,KAAI,SAACY,EAAKuB,GACf,OAAOvB,EAAIwB,SAASpC,KAAI,SAACa,EAAKwB,GAE1B,OADAC,EAAIC,KAAJ,2BAAa1B,GAAb,IAAkBA,IAAKwB,EAAUzB,IAAKuB,KAC/BtB,UARvB","file":"static/js/8.16f4dd5b.chunk.js","sourcesContent":["import React, { Component, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { DragDropContext, Droppable, Draggable, onDragStart } from 'react-beautiful-dnd';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGripVertical } from '@fortawesome/free-solid-svg-icons'\n\n\n// fake data generator\nconst getItems = count =>\n  Array.from({ length: count }, (v, k) => k).map(k => ({\n    id: `item-${k}`,\n    content: `item ${k}`,\n  }));\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nconst grid = 8;\n\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver && 'lightblue',\n  padding: grid,\n//   overflow: 'auto',\n  border: '1px solid #eee',\n  borderRadius: 5,\n  margin: 10,\n  position: 'relative',\n//   overflowX: 'auto',\n\n});\n\nconst ServiceCommandUnit = (props) => {\n    const {\n        addNewRow\n    } = props\n\n\n    const getItemStyle = (isDragging, draggableStyle, rowLength) => ({\n        // some basic styles to make the items look a bit nicer\n        //userSelect: 'none',\n        padding: grid * 2,\n        margin: `0 ${grid}px 0 0`,\n        // change background colour if dragging\n        background: isDragging ? 'lightgreen' : 'grey',\n        // width: '100%',\n        width: `${100 / (rowLength )}%`,\n\n      \n        // styles we need to apply on draggables\n        ...draggableStyle,\n        draggableStyle: !isDragging ? '10%' : `${100 / (rowLength + 2 )}%`,\n      \n      });\n\n      const [ dragFoo, setDragFoo ] = useState();\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n    return (\n        // <Droppable droppableId=\"droppable\" direction=\"horizontal\">\n        <>\n\n        <Droppable \n            droppableId={props.type} \n            type={`droppableSubItem`} \n            direction=\"horizontal\" \n            //isDropDisabled={ props.subItems.length > 3 ? true : false }\n        >\n\n        {(provided, snapshot) => (\n            <div \n                style={{\n                    border: '1px solid green',\n                    padding: 10,\n                }}\n            >\n                <div\n                    ref={provided.innerRef}\n                    style={getListStyle(snapshot.isDraggingOver)}\n                    {...provided.droppableProps}\n                >\n\n                    <div \n                        style={{\n                            overflowY: 'visible',\n                            overflowX: 'auto',\n                        }}\n                    >\n                        <div \n                            style={{\n                                width: 50,\n                                height: 25,\n                                background: 'purple',\n                                position: 'absolute',\n                                top: -12.5,\n                                right: 10,\n                                zIndex: 99,\n                            }}\n                        >\n\n                        </div>\n\n                        <div\n                            style={{\n                                display: 'flex',\n                                margin: 15,\n                            }}\n                        > \n                        {/* parentDrag */}\n                        <span {...props.parentDrag} style={{marginRight: 10}}>\n                            <FontAwesomeIcon\n                                icon={faGripVertical}\n                                style={{ float: \"left\" }}\n                            />\n                        </span>\n                            <button \n                                onClick={addNewRow}\n                                //   onClick={() => {addNewRow(index + 1)}}\n                            >\n                                Insert Row below\n                            </button>\n\n                            {props.subItems.map((item, index) => (\n                            \n                            <>\n                                <Draggable  \n                                key={item.id}\n                                draggableId={item.id} index={index}>\n                                    {(provided, snapshot) => (\n                                        <>\n            \n                                {/* <div\n                                    key={item.id} \n                                    onMouseDown={(e)=> {console.log('e',e)}}\n                                    style={{\n                                        background: 'pink',\n                                        margin: 5,\n                                        // width: `100%`,\n                                        // width: `${100 / props.subItems.length}%`,\n                                        display: 'flex',\n                                    }}\n                                > */}\n                                            <div\n                                                ref={provided.innerRef}\n                                                {...provided.draggableProps}\n                                                // {...provided.dragHandleProps}\n                                                style={getItemStyle(\n                                                    snapshot.isDragging,\n                                                    provided.draggableProps.style, \n                                                    props.subItems.length\n                                                )}\n                                            >\n                                                <span {...provided.dragHandleProps} style={{marginRight: 10}}>\n                                                <FontAwesomeIcon\n                                                    icon={faGripVertical}\n                                                    style={{ float: \"left\" }}\n                                                />\n                                                </span>\n                                                {item.name}\n                                            </div>\n                                {/* </div> */}\n                                        </>\n                                    )}\n                                </Draggable>\n                             </>\n                            ))}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )}\n        </Droppable>\n        </>\n    );\n}\n\nexport default ServiceCommandUnit\n\n// Put the thing into the DOM!\n\n\n//  https://codesandbox.io/s/j4yvnr7n83?file=/src/answer.js:1198-1344","import React from 'react';\n\nimport Box from '@material-ui/core/Box';\n// import LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { Paper } from '@material-ui/core';\n\n\nconst FieldOptions = (props) => {\n    const {\n        addNewField\n    } = props\n\n    const commonFields = [\n        {\n            name: 'First Name',\n            type: 'text',\n        },\n        {\n            name: 'Last Name',\n            type: 'text',\n        },\n        {\n            name: 'Phone',\n            type: 'text',\n        },\n        {\n            name: 'Email',\n            type: 'text',\n        },\n        {\n            name: 'State',\n            type: 'select',\n        },\n        {\n            name: 'Zip Code',\n            type: 'text',\n        },\n\n    ]\n\n    return (\n        <Box style={{width: '33%', border: '1px solid red'}}>\n        <Box style={{width:'inherit', position: 'fixed'}}>\n            <Box style={{ border: '1px solid blue', padding: 24}}>\n                <Typography>\n                    Common\n                </Typography>\n\n                <Box display=\"flex\" justifyContent=\"space-around\" width=\"100%\" style={{flexWrap: 'wrap'}}>\n                {commonFields.map((field, i) => {\n                    return (\n                        <Box key={field.name} style ={{width: '33.33%', border: '1px solid red'}}>\n                            <Box>\n                                <Paper\n                                    onClick={() => {\n                                        addNewField(field.name, field.type)\n                                    }} \n                                    style={{width: '100%', border: '1px solid blue', backgroundColor: '#ddd', cursor: 'pointer', padding: 10}}\n                                >\n                                    <Typography>\n                                        {field.name}\n                                    </Typography>\n                                </Paper>\n                            </Box>\n                         </Box>\n                    )\n                })}\n                </Box>\n            </Box>\n        </Box>\n        </Box>\n    )\n}\n\nexport default FieldOptions","import React, { useState, useEffect, useRef } from 'react';\n\nimport Box from '@material-ui/core/Box';\n\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport ServiceCommandUnit from \"./ServiceCommandUnit\";\nimport FieldOptions from './FieldOptions'\n\n// import { useDispatch } from 'react-redux';\nimport shortid from 'shortid';\n\n\nconst formElementsList = [\n    {\n        id: shortid.generate(),\n        name: 'First Name',\n        row: 0,\n        col: 0,\n        type: 'text',\n    },\n    {\n        id: shortid.generate(),\n        name: 'Last Name',\n        row: 0,\n        col: 6,\n        type: 'text',\n    },\n    {\n        id: shortid.generate(),\n        name: 'Address',\n        row: 0,\n        col: 1,\n        type: 'text',\n    },\n    {\n        id: shortid.generate(),\n        name: 'Phone',\n        row: 1,\n        col: 0,\n        type: 'text',\n    },\n    {\n        id: shortid.generate(),\n        name: 'Email',\n        row: 1,\n        col: 1,\n        type: 'text',\n    },\n    {\n        id: shortid.generate(),\n        name: 'Row',\n        row: 2,\n        col: 1,\n        type: 'text',\n    },\n    {\n        id: shortid.generate(),\n        name: 'thing1',\n        row: 2,\n        col: 0,\n        type: 'text',\n    },\n    {\n        id: shortid.generate(),\n        name: 'thing2',\n        row: 3,\n        col: 0,\n        type: 'text',\n    },\n    {\n        id: shortid.generate(),\n        name: 'thing2.5',\n        row: 5,\n        col: 0,\n        type: 'text',\n    },\n\n    {\n        id: shortid.generate(),\n        name: 'thing3',\n        row: 9,\n        col: 0,\n        type: 'text',\n    },\n]\n\n\nconst reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n\n    const [removed] = result.splice(startIndex, 1);\n\n    result.splice(endIndex, 0, removed);\n\n    const foo = result.map((el, index) => {\n        return {...el, col:  index}\n    });\n\n    return foo;\n  };\n\n\nfunction FormBuilderView({ className, onSubmitSuccess, ...rest }) {\n\n//   function getRows(list){\n//     console.log('getRows', list.map(elem => elem))\n//     return list.map(elem => elem.row);\n//   }\n\n//   const getMaxRow = (list) => {\n//     return Math.max(...getRows(list));\n//   }\n\n\n  const [dataList, setDataList] = useState([]);\n\n\n  useEffect(() => {\n    buildArrayMatrix(formElementsList);\n  }, []);\n\n\n//   const sortedFormElements = (array) => {\n//     return array.sort(function (row1, row2){\n\n//         // sort by row\n//         if  (row1.row < row2.row) return -1;\n//         if  (row1.row > row2.row) return 1;\n\n//         // sort by col\n//         if  (row1.col < row2.col) return -1;\n//         if  (row1.col > row2.col) return 1;\n\n//     });\n//   }\n\n  const buildArrayMatrix = (array) => {\n    let tempArray = []\n    // const arrayCopy = array\n    // let foo = arrayCopy.map((el, index) => {\n    //     // tempArray.push([])\n    //         if (tempArray[el.row]){\n    //             tempArray[el.row].splice(el.col, 0, el)\n    //             return el\n\n    //         } else {\n    //             tempArray.push([el])\n    //             return {...el, row: tempArray.length - 1 }\n    //         }\n\n    //     });\n\n    const bar = tempArray.map((row, rowIndex) => {\n        return {\n            id: `${rowIndex}`,\n            subItems: row.map((col, colIndex) => {\n                return {\n                    ...col, \n                    col: colIndex, \n                    row: rowIndex\n                }\n            })\n        }\n    }) \n\n    setDataList(bar)\n\n    // Rebuild function\n    const arr = []\n    bar.map(row => {\n        return row.subItems.map(col => {\n            arr.push(col)\n            return col\n        })\n    })\n\n    // tempArray.forEach((row, i) => {\n    //     tempArray.splice(i, 0, []);\n    // })\n\n    console.log('arr', arr)\n    \n    return tempArray\n  }\n\n\n\n\n  const onDragEnd = (result) => {\n    // dropped outside the list\n    setElemWidth(false)\n    if (!result.destination) {\n      return;\n    }\n    const sourceIndex = result.source.index;\n    const destIndex = result.destination.index;\n    \n    if (result.type === \"droppableItem\") {\n        const items = reorder(dataList, sourceIndex, destIndex);\n        setDataList(items)\n    } else if (result.type === \"droppableSubItem\") {\n      const itemSubItemMap = dataList.reduce((acc, item) => {\n        acc[item.id] = item.subItems;\n        return acc;\n      }, {});\n\n      const sourceParentId = parseInt(result.source.droppableId);\n      const destParentId = parseInt(result.destination.droppableId);\n\n\n      const sourceSubItems = itemSubItemMap[sourceParentId];\n\n      const destSubItems = itemSubItemMap[destParentId];\n\n      let newItems = [...dataList];\n\n      /** In this case subItems are reOrdered inside same Parent */\n      if (sourceParentId === destParentId) {\n        const reorderedSubItems = reorder(\n          sourceSubItems,\n          sourceIndex,\n          destIndex\n        );\n\n        newItems = newItems.map(item => {\n          if (item.id == sourceParentId) {\n            item.subItems = reorderedSubItems;\n          }\n          return item;\n        });\n\n        setDataList(newItems);\n      } else {\n        let newSourceSubItems = [...sourceSubItems];\n        const [draggedItem] = newSourceSubItems.splice(sourceIndex, 1);\n\n        let newDestSubItems = [...destSubItems];\n        newDestSubItems.splice(destIndex, 0, draggedItem);\n        newItems = newItems.map(item => {\n          if (item.id == sourceParentId) {\n            item.subItems = newSourceSubItems;\n          } else if (item.id == destParentId) {\n            item.subItems = newDestSubItems;\n          }\n          return item;\n        });\n\n        result.type = 'droppableItem';\n        setDataList(newItems.filter(row => row.subItems.length));\n      }\n    }\n  }\n\n\n  let resultsRef = useRef();\n\n  const addNewField = (name, type) => {\n    const tempArray = dataList;\n    const newTempArray = [\n        ...tempArray, \n        {\n            id: `${dataList.length}`, \n            subItems: [\n                {\n                    id: shortid.generate(), \n                    name,\n                    row: dataList.length, \n                    col: 0, \n                    type, \n                }\n            ] \n        }\n    ]\n    setDataList(newTempArray);\n    \n    scrollToRef();\n\n  }\n\n\n  const scrollToRef = () => {\n    setTimeout(function(){ \n        resultsRef.current.scrollIntoView({behavior: \"smooth\", block: \"end\", inline: \"nearest\"});\n    }, 100);\n  } \n\n\n  \n  const addNewRow = (indexToAdd) => {\n    const tempArray = dataList\n    tempArray.splice(indexToAdd , 0, {subItems: []})\n\n    setDataList(\n        tempArray.map((el, tempIndex) => { \n            return {...el, id: `${tempIndex}`}\n        })\n    );                 \n  }\n\nconst [elemWidth, setElemWidth] = useState(false)\n  return (\n    <Box display=\"flex\" height=\"100%\" width=\"100%\" style={{border: '1px solid red'}}>\n        <FieldOptions\n            addNewField={ addNewField }\n        />\n        {/* FORM DROP ZONE START */}\n        <Box style={{border: '1px solid green'}} width=\"50%\">  {/* 67% */}\n            <DragDropContext onDragEnd={onDragEnd} onBeforeCapture={(e) => setElemWidth(true)}>\n                <Droppable droppableId=\"droppable\" type=\"droppableItem\">\n                    {(provided, snapshot) => (\n                        <div\n                            ref={provided.innerRef}\n                            //   style={getListStyle(snapshot.isDraggingOver)}\n                        >\n                            <button onClick={() => {addNewRow(0)}}>\n                                Add First Row\n                            </button>\n                            {dataList.map((item, index) => (\n                                <div   \n                                    key={item.id}\n                                    ref={resultsRef} \n                                >\n                                <Draggable key={item.id} draggableId={item.id} index={index}>\n                                    \n                                {(provided, snapshot) => (\n                                    <div>\n                                        <div\n                                            ref={provided.innerRef}\n                                            {...provided.draggableProps}\n                                            // {...provided.dragHandleProps}\n                                        >\n                                            {console.log('===', item)}\n                                            {/* <span {...provided.dragHandleProps} style={{marginRight: 10}}>\n                                                <FontAwesomeIcon\n                                                    icon={faGripVertical}\n                                                    style={{ float: \"left\" }}\n                                                />\n                                                </span> */}\n                                    \n                                            <ServiceCommandUnit\n                                                parentDrag={{...provided.dragHandleProps}}\n                                                elemWidth={elemWidth}\n                                                addNewRow={() => addNewRow(index + 1)}\n                                                subItems={item.subItems}\n                                                type={item.id}\n                                            />\n                                \n                                        </div>\n                        \n                                \n                                    </div>\n                                    \n                                )}\n                                \n                                </Draggable>\n\n                                </div>\n                            ))}\n                            {provided.placeholder} \n                        </div>\n                    )}\n                </Droppable>\n            </DragDropContext>\n\n            <button\n                onClick={() => {\n                    // this will re clean the array row and col values\n                    const arr = [];\n\n                    dataList.map((row, rowIndex) => {\n                        return row.subItems.map((col, colIndex) => {\n                            arr.push({...col, col: colIndex, row: rowIndex})\n                            return col\n                        })\n                    });\n                }}\n            >\n                Save\n            </button>\n        </Box>\n        { /* FORM DROP ZONE END */}\n    </Box>\n  );\n}\n\nexport default FormBuilderView;\n"],"sourceRoot":""}