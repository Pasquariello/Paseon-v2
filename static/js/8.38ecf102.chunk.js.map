{"version":3,"sources":["views/formBuilderView/ServiceCommandUnit.js","views/formBuilderView/FieldOptions.js","views/formBuilderView/index.js"],"names":["ServiceCommandUnit","props","addNewRow","useState","droppableId","type","direction","isDropDisabled","subItems","length","provided","snapshot","style","border","padding","ref","innerRef","isDraggingOver","background","borderRadius","margin","position","droppableProps","overflowY","overflowX","width","height","top","right","zIndex","display","parentDrag","marginRight","icon","faGripVertical","float","onClick","map","item","index","key","id","draggableId","draggableProps","isDragging","draggableStyle","rowLength","grid","dragHandleProps","name","FieldOptions","addNewField","Box","Typography","justifyContent","flexWrap","field","i","Paper","backgroundColor","cursor","formElementsList","shortid","generate","row","col","reorder","list","startIndex","endIndex","result","Array","from","splice","removed","el","FormBuilderView","className","onSubmitSuccess","useDispatch","dataList","setDataList","useEffect","buildArrayMatrix","array","tempArray","bar","push","rowIndex","colIndex","arr","console","log","resultsRef","useRef","scrollToRef","setTimeout","current","scrollIntoView","behavior","block","inline","indexToAdd","tempIndex","elemWidth","setElemWidth","newTempArray","onDragEnd","destination","sourceIndex","source","destIndex","items","itemSubItemMap","reduce","acc","sourceParentId","parseInt","destParentId","sourceSubItems","destSubItems","newItems","reorderedSubItems","newSourceSubItems","draggedItem","newDestSubItems","filter","onBeforeCapture","e","placeholder"],"mappings":"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","file":"static/js/8.38ecf102.chunk.js","sourcesContent":["import React, { Component, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { DragDropContext, Droppable, Draggable, onDragStart } from 'react-beautiful-dnd';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGripVertical } from '@fortawesome/free-solid-svg-icons'\n\n\n// fake data generator\nconst getItems = count =>\n  Array.from({ length: count }, (v, k) => k).map(k => ({\n    id: `item-${k}`,\n    content: `item ${k}`,\n  }));\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nconst grid = 8;\n\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver && 'lightblue',\n  padding: grid,\n//   overflow: 'auto',\n  border: '1px solid #eee',\n  borderRadius: 5,\n  margin: 10,\n  position: 'relative',\n//   overflowX: 'auto',\n\n});\n\nconst ServiceCommandUnit = (props) => {\n    const {\n        addNewRow\n    } = props\n\n\n    const getItemStyle = (isDragging, draggableStyle, rowLength) => ({\n        // some basic styles to make the items look a bit nicer\n        //userSelect: 'none',\n        padding: grid * 2,\n        margin: `0 ${grid}px 0 0`,\n        // change background colour if dragging\n        background: isDragging ? 'lightgreen' : 'grey',\n        // width: '100%',\n        width: `${100 / (rowLength )}%`,\n\n      \n        // styles we need to apply on draggables\n        ...draggableStyle,\n        draggableStyle: !isDragging ? '10%' : `${100 / (rowLength + 2 )}%`,\n      \n      });\n\n      const [ dragFoo, setDragFoo ] = useState();\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n     // <Droppable droppableId=\"droppable\" direction=\"horizontal\">\n\n  \n    return (\n        <>\n\n        <Droppable droppableId={props.type} type={`droppableSubItem`} direction=\"horizontal\" isDropDisabled={ props.subItems.length > 3 ? true : false }>\n\n        {(provided, snapshot) => (\n            <div \n                style={{\n                    border: '1px solid green',\n                    padding: 10,\n                }}\n            >\n                <div\n                    ref={provided.innerRef}\n                    style={getListStyle(snapshot.isDraggingOver)}\n                    {...provided.droppableProps}\n                >\n\n                    <div \n                        style={{\n                            overflowY: 'visible',\n                            overflowX: 'auto',\n                        }}\n                    >\n                        <div \n                            style={{\n                                width: 50,\n                                height: 25,\n                                background: 'purple',\n                                position: 'absolute',\n                                top: -12.5,\n                                right: 10,\n                                zIndex: 99,\n                            }}\n                        >\n\n                        </div>\n\n                        <div\n                            style={{\n                                display: 'flex',\n                                margin: 15,\n                            }}\n                        > \n                        {/* parentDrag */}\n                        <span {...props.parentDrag} style={{marginRight: 10}}>\n                            <FontAwesomeIcon\n                                icon={faGripVertical}\n                                style={{ float: \"left\" }}\n                            />\n                        </span>\n                            <button \n                                onClick={addNewRow}\n                                //   onClick={() => {addNewRow(index + 1)}}\n                            >\n                                Insert Row below\n                            </button>\n\n                            {props.subItems.map((item, index) => (\n                            \n                            <>\n                                <Draggable  \n                                key={item.id}\n                                draggableId={item.id} index={index}>\n                                    {(provided, snapshot) => (\n                                        <>\n            \n                                {/* <div\n                                    key={item.id} \n                                    onMouseDown={(e)=> {console.log('e',e)}}\n                                    style={{\n                                        background: 'pink',\n                                        margin: 5,\n                                        // width: `100%`,\n                                        // width: `${100 / props.subItems.length}%`,\n                                        display: 'flex',\n                                    }}\n                                > */}\n                                            <div\n                                                ref={provided.innerRef}\n                                                {...provided.draggableProps}\n                                                // {...provided.dragHandleProps}\n                                                style={getItemStyle(\n                                                    snapshot.isDragging,\n                                                    provided.draggableProps.style, \n                                                    props.subItems.length\n                                                )}\n                                            >\n                                                <span {...provided.dragHandleProps} style={{marginRight: 10}}>\n                                                <FontAwesomeIcon\n                                                    icon={faGripVertical}\n                                                    style={{ float: \"left\" }}\n                                                />\n                                                </span>\n                                                {item.name}\n                                            </div>\n                                {/* </div> */}\n                                        </>\n                                    )}\n                                </Draggable>\n                             </>\n                            ))}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )}\n        </Droppable>\n        </>\n    );\n}\n\nexport default ServiceCommandUnit\n\n// Put the thing into the DOM!\n\n\n//  https://codesandbox.io/s/j4yvnr7n83?file=/src/answer.js:1198-1344","import React from 'react';\n\nimport Box from '@material-ui/core/Box';\n// import LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { Paper } from '@material-ui/core';\n\n\nconst FieldOptions = (props) => {\n    const {\n        addNewField\n    } = props\n\n    const commonFields = [\n        {\n            name: 'First Name',\n            type: 'text',\n        },\n        {\n            name: 'Last Name',\n            type: 'text',\n        },\n        {\n            name: 'Phone',\n            type: 'text',\n        },\n        {\n            name: 'Email',\n            type: 'text',\n        },\n        {\n            name: 'State',\n            type: 'select',\n        },\n        {\n            name: 'Zip Code',\n            type: 'text',\n        },\n\n    ]\n\n    return (\n        <Box style={{width: '33%', border: '1px solid red'}}>\n        <Box style={{width:'inherit', position: 'fixed'}}>\n            <Box style={{ border: '1px solid blue', padding: 24}}>\n                <Typography>\n                    Common\n                </Typography>\n\n                <Box display=\"flex\" justifyContent=\"space-around\" width=\"100%\" style={{flexWrap: 'wrap'}}>\n                {commonFields.map((field, i) => {\n                    return (\n                        <Box key={field.name} style ={{width: '33.33%', border: '1px solid red'}}>\n                            <Box>\n                                <Paper\n                                    onClick={() => {\n                                        addNewField(field.name, field.type)\n                                    }} \n                                    style={{width: '100%', border: '1px solid blue', backgroundColor: '#ddd', cursor: 'pointer', padding: 10}}\n                                >\n                                    <Typography>\n                                        {field.name}\n                                    </Typography>\n                                </Paper>\n                            </Box>\n                         </Box>\n                    )\n                })}\n                </Box>\n            </Box>\n        </Box>\n        </Box>\n    )\n}\n\nexport default FieldOptions","import React, { useState, useEffect, useRef } from 'react';\n\nimport Box from '@material-ui/core/Box';\n// import LockOutlinedIcon from '@material-ui/icons/LockOutlined';\n// import LockOutlinedIcon from '@material-ui/icons/LockOutlined';\n// import Typography from '@material-ui/core/Typography';\n// import { makeStyles } from '@material-ui/core/styles';\n// import {Button, Card, CardContent, Container, Paper, TextField, FormGroup} from '@material-ui/core';\n// import { v4 as uuidv4 } from 'uuid';\n\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport ServiceCommandUnit from \"./ServiceCommandUnit\";\nimport FieldOptions from './FieldOptions'\n\nimport { useDispatch } from 'react-redux';\nimport shortid from 'shortid';\n\n\nconst formElementsList = [\n    {\n        id: shortid.generate(),\n        name: 'First Name',\n        row: 0,\n        col: 0,\n        type: 'text',\n    },\n    {\n        id: shortid.generate(),\n        name: 'Last Name',\n        row: 0,\n        col: 6,\n        type: 'text',\n    },\n    {\n        id: shortid.generate(),\n        name: 'Address',\n        row: 0,\n        col: 1,\n        type: 'text',\n    },\n    {\n        id: shortid.generate(),\n        name: 'Phone',\n        row: 1,\n        col: 0,\n        type: 'text',\n    },\n    {\n        id: shortid.generate(),\n        name: 'Email',\n        row: 1,\n        col: 1,\n        type: 'text',\n    },\n    {\n        id: shortid.generate(),\n        name: 'Row',\n        row: 2,\n        col: 1,\n        type: 'text',\n    },\n    {\n        id: shortid.generate(),\n        name: 'thing1',\n        row: 2,\n        col: 0,\n        type: 'text',\n    },\n    {\n        id: shortid.generate(),\n        name: 'thing2',\n        row: 3,\n        col: 0,\n        type: 'text',\n    },\n    {\n        id: shortid.generate(),\n        name: 'thing2.5',\n        row: 5,\n        col: 0,\n        type: 'text',\n    },\n\n    {\n        id: shortid.generate(),\n        name: 'thing3',\n        row: 9,\n        col: 0,\n        type: 'text',\n    },\n]\n\n\nconst reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n\n    const [removed] = result.splice(startIndex, 1);\n\n    result.splice(endIndex, 0, removed);\n\n    const foo = result.map((el, index) => {\n        return {...el, col:  index}\n    });\n\n    return foo;\n  };\n\n\nfunction FormBuilderView({ className, onSubmitSuccess, ...rest }) {\n  const dispatch = useDispatch();\n\n  function getRows(list){\n    console.log('getRows', list.map(elem => elem))\n    return list.map(elem => elem.row);\n  }\n\n  const getMaxRow = (list) => {\n    return Math.max(...getRows(list));\n  }\n\n\n  const [dataList, setDataList] = useState([]);\n\n\n  useEffect(() => {\n    buildArrayMatrix(formElementsList);\n  }, []);\n\n\n  const sortedFormElements = (array) => {\n    return array.sort(function (row1, row2){\n\n        // sort by row\n        if  (row1.row < row2.row) return -1;\n        if  (row1.row > row2.row) return 1;\n\n        // sort by col\n        if  (row1.col < row2.col) return -1;\n        if  (row1.col > row2.col) return 1;\n\n    });\n  }\n\n  const buildArrayMatrix = (array) => {\n    let tempArray = []\n    const arrayCopy = array\n    let foo = arrayCopy.map((el, index) => {\n        // tempArray.push([])\n            if (tempArray[el.row]){\n                tempArray[el.row].splice(el.col, 0, el)\n                return el\n\n            } else {\n                tempArray.push([el])\n                return {...el, row: tempArray.length - 1 }\n            }\n\n        });\n\n    const bar = tempArray.map((row, rowIndex) => {\n        return {\n            id: `${rowIndex}`,\n            subItems: row.map((col, colIndex) => {\n                return {\n                    ...col, \n                    col: colIndex, \n                    row: rowIndex\n                }\n            })\n        }\n    }) \n\n    setDataList(bar)\n\n    // Rebuild function\n    const arr = []\n    bar.map(row => {\n        return row.subItems.map(col => {\n            arr.push(col)\n            return col\n        })\n    })\n\n    // tempArray.forEach((row, i) => {\n    //     tempArray.splice(i, 0, []);\n    // })\n\n    console.log('arr', arr)\n    \n    return tempArray\n  }\n\n\n\n\n  const onDragEnd = (result) => {\n    // dropped outside the list\n    setElemWidth(false)\n    if (!result.destination) {\n      return;\n    }\n    const sourceIndex = result.source.index;\n    const destIndex = result.destination.index;\n    \n    if (result.type === \"droppableItem\") {\n        const items = reorder(dataList, sourceIndex, destIndex);\n        setDataList(items)\n    } else if (result.type === \"droppableSubItem\") {\n      const itemSubItemMap = dataList.reduce((acc, item) => {\n        acc[item.id] = item.subItems;\n        return acc;\n      }, {});\n\n      const sourceParentId = parseInt(result.source.droppableId);\n      const destParentId = parseInt(result.destination.droppableId);\n\n\n      const sourceSubItems = itemSubItemMap[sourceParentId];\n\n      const destSubItems = itemSubItemMap[destParentId];\n\n      let newItems = [...dataList];\n\n      /** In this case subItems are reOrdered inside same Parent */\n      if (sourceParentId === destParentId) {\n        const reorderedSubItems = reorder(\n          sourceSubItems,\n          sourceIndex,\n          destIndex\n        );\n\n        newItems = newItems.map(item => {\n          if (item.id == sourceParentId) {\n            item.subItems = reorderedSubItems;\n          }\n          return item;\n        });\n\n        setDataList(newItems);\n      } else {\n        let newSourceSubItems = [...sourceSubItems];\n        const [draggedItem] = newSourceSubItems.splice(sourceIndex, 1);\n\n        let newDestSubItems = [...destSubItems];\n        newDestSubItems.splice(destIndex, 0, draggedItem);\n        newItems = newItems.map(item => {\n          if (item.id == sourceParentId) {\n            item.subItems = newSourceSubItems;\n          } else if (item.id == destParentId) {\n            item.subItems = newDestSubItems;\n          }\n          return item;\n        });\n\n        result.type = 'droppableItem';\n        setDataList(newItems.filter(row => row.subItems.length));\n      }\n    }\n  }\n\n\n  let resultsRef = useRef();\n\n  const addNewField = (name, type) => {\n    const tempArray = dataList;\n    const newTempArray = [\n        ...tempArray, \n        {\n            id: `${dataList.length}`, \n            subItems: [\n                {\n                    id: shortid.generate(), \n                    name,\n                    row: dataList.length, \n                    col: 0, \n                    type, \n                }\n            ] \n        }\n    ]\n    setDataList(newTempArray);\n    \n    scrollToRef();\n\n  }\n\n\n  const scrollToRef = () => {\n    setTimeout(function(){ \n        resultsRef.current.scrollIntoView({behavior: \"smooth\", block: \"end\", inline: \"nearest\"});\n    }, 100);\n  } \n\n\n  \n  const addNewRow = (indexToAdd) => {\n    const tempArray = dataList\n    tempArray.splice(indexToAdd , 0, {subItems: []})\n\n    setDataList(\n        tempArray.map((el, tempIndex) => { \n            return {...el, id: `${tempIndex}`}\n        })\n    );                 \n  }\n\nconst [elemWidth, setElemWidth] = useState(false)\n  return (\n    <Box display=\"flex\" height=\"100%\" width=\"100%\" style={{border: '1px solid red'}}>\n        <FieldOptions\n            addNewField={ addNewField }\n        />\n        {/* FORM DROP ZONE START */}\n        <Box style={{border: '1px solid green'}} width=\"50%\">  {/* 67% */}\n            <DragDropContext onDragEnd={onDragEnd} onBeforeCapture={(e) => setElemWidth(true)}>\n                <Droppable droppableId=\"droppable\" type=\"droppableItem\">\n                    {(provided, snapshot) => (\n                        <div\n                            ref={provided.innerRef}\n                            //   style={getListStyle(snapshot.isDraggingOver)}\n                        >\n                            <button onClick={() => {addNewRow(0)}}>\n                                Add First Row\n                            </button>\n                            {dataList.map((item, index) => (\n                                <div   \n                                    key={item.id}\n                                    ref={resultsRef} \n                                >\n                                <Draggable key={item.id} draggableId={item.id} index={index}>\n                                    \n                                {(provided, snapshot) => (\n                                    <div>\n                                        <div\n                                            ref={provided.innerRef}\n                                            {...provided.draggableProps}\n                                            // {...provided.dragHandleProps}\n                                        >\n                                            {console.log('===', item)}\n                                            {/* <span {...provided.dragHandleProps} style={{marginRight: 10}}>\n                                                <FontAwesomeIcon\n                                                    icon={faGripVertical}\n                                                    style={{ float: \"left\" }}\n                                                />\n                                                </span> */}\n                                    \n                                            <ServiceCommandUnit\n                                                parentDrag={{...provided.dragHandleProps}}\n                                                elemWidth={elemWidth}\n                                                addNewRow={() => addNewRow(index + 1)}\n                                                subItems={item.subItems}\n                                                type={item.id}\n                                            />\n                                \n                                        </div>\n                        \n                                \n                                    </div>\n                                    \n                                )}\n                                \n                                </Draggable>\n\n                                </div>\n                            ))}\n                            {provided.placeholder} \n                        </div>\n                    )}\n                </Droppable>\n            </DragDropContext>\n\n            <button\n                onClick={() => {\n                    // this will re clean the array row and col values\n                    const arr = [];\n\n                    dataList.map((row, rowIndex) => {\n                        return row.subItems.map((col, colIndex) => {\n                            arr.push({...col, col: colIndex, row: rowIndex})\n                            return col\n                        })\n                    });\n                }}\n            >\n                Save\n            </button>\n        </Box>\n        { /* FORM DROP ZONE END */}\n    </Box>\n  );\n}\n\nexport default FormBuilderView;\n"],"sourceRoot":""}